{"ast":null,"code":"// Copyright (c) 2008-2013, Andrew Brehaut, Tim Baumann, Matt Wilson, \n//                          Simon Heimler, Michel Vielmetter \n//\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n// * Redistributions of source code must retain the above copyright notice,\n//   this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above copyright notice,\n//   this list of conditions and the following disclaimer in the documentation\n//   and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n// color.js - version 1.0.1\n//\n// HSV <-> RGB code based on code from http://www.cs.rit.edu/~ncs/color/t_convert.html\n// object function created by Douglas Crockford.\n// Color scheme degrees taken from the colorjack.com colorpicker\n//\n// HSL support kindly provided by Tim Baumann - http://github.com/timjb\n// create namespaces\n\n/*global net */\nif (\"undefined\" == typeof net) {\n  var net = {};\n}\n\nif (!net.brehaut) {\n  net.brehaut = {};\n} // this module function is called with net.brehaut as 'this'\n\n\n(function () {\n  \"use strict\"; // Constants\n  // css_colors maps color names onto their hex values\n  // these names are defined by W3C\n\n  var css_colors = {\n    aliceblue: '#F0F8FF',\n    antiquewhite: '#FAEBD7',\n    aqua: '#00FFFF',\n    aquamarine: '#7FFFD4',\n    azure: '#F0FFFF',\n    beige: '#F5F5DC',\n    bisque: '#FFE4C4',\n    black: '#000000',\n    blanchedalmond: '#FFEBCD',\n    blue: '#0000FF',\n    blueviolet: '#8A2BE2',\n    brown: '#A52A2A',\n    burlywood: '#DEB887',\n    cadetblue: '#5F9EA0',\n    chartreuse: '#7FFF00',\n    chocolate: '#D2691E',\n    coral: '#FF7F50',\n    cornflowerblue: '#6495ED',\n    cornsilk: '#FFF8DC',\n    crimson: '#DC143C',\n    cyan: '#00FFFF',\n    darkblue: '#00008B',\n    darkcyan: '#008B8B',\n    darkgoldenrod: '#B8860B',\n    darkgray: '#A9A9A9',\n    darkgrey: '#A9A9A9',\n    darkgreen: '#006400',\n    darkkhaki: '#BDB76B',\n    darkmagenta: '#8B008B',\n    darkolivegreen: '#556B2F',\n    darkorange: '#FF8C00',\n    darkorchid: '#9932CC',\n    darkred: '#8B0000',\n    darksalmon: '#E9967A',\n    darkseagreen: '#8FBC8F',\n    darkslateblue: '#483D8B',\n    darkslategray: '#2F4F4F',\n    darkslategrey: '#2F4F4F',\n    darkturquoise: '#00CED1',\n    darkviolet: '#9400D3',\n    deeppink: '#FF1493',\n    deepskyblue: '#00BFFF',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1E90FF',\n    firebrick: '#B22222',\n    floralwhite: '#FFFAF0',\n    forestgreen: '#228B22',\n    fuchsia: '#FF00FF',\n    gainsboro: '#DCDCDC',\n    ghostwhite: '#F8F8FF',\n    gold: '#FFD700',\n    goldenrod: '#DAA520',\n    gray: '#808080',\n    grey: '#808080',\n    green: '#008000',\n    greenyellow: '#ADFF2F',\n    honeydew: '#F0FFF0',\n    hotpink: '#FF69B4',\n    indianred: '#CD5C5C',\n    indigo: '#4B0082',\n    ivory: '#FFFFF0',\n    khaki: '#F0E68C',\n    lavender: '#E6E6FA',\n    lavenderblush: '#FFF0F5',\n    lawngreen: '#7CFC00',\n    lemonchiffon: '#FFFACD',\n    lightblue: '#ADD8E6',\n    lightcoral: '#F08080',\n    lightcyan: '#E0FFFF',\n    lightgoldenrodyellow: '#FAFAD2',\n    lightgray: '#D3D3D3',\n    lightgrey: '#D3D3D3',\n    lightgreen: '#90EE90',\n    lightpink: '#FFB6C1',\n    lightsalmon: '#FFA07A',\n    lightseagreen: '#20B2AA',\n    lightskyblue: '#87CEFA',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#B0C4DE',\n    lightyellow: '#FFFFE0',\n    lime: '#00FF00',\n    limegreen: '#32CD32',\n    linen: '#FAF0E6',\n    magenta: '#FF00FF',\n    maroon: '#800000',\n    mediumaquamarine: '#66CDAA',\n    mediumblue: '#0000CD',\n    mediumorchid: '#BA55D3',\n    mediumpurple: '#9370D8',\n    mediumseagreen: '#3CB371',\n    mediumslateblue: '#7B68EE',\n    mediumspringgreen: '#00FA9A',\n    mediumturquoise: '#48D1CC',\n    mediumvioletred: '#C71585',\n    midnightblue: '#191970',\n    mintcream: '#F5FFFA',\n    mistyrose: '#FFE4E1',\n    moccasin: '#FFE4B5',\n    navajowhite: '#FFDEAD',\n    navy: '#000080',\n    oldlace: '#FDF5E6',\n    olive: '#808000',\n    olivedrab: '#6B8E23',\n    orange: '#FFA500',\n    orangered: '#FF4500',\n    orchid: '#DA70D6',\n    palegoldenrod: '#EEE8AA',\n    palegreen: '#98FB98',\n    paleturquoise: '#AFEEEE',\n    palevioletred: '#D87093',\n    papayawhip: '#FFEFD5',\n    peachpuff: '#FFDAB9',\n    peru: '#CD853F',\n    pink: '#FFC0CB',\n    plum: '#DDA0DD',\n    powderblue: '#B0E0E6',\n    purple: '#800080',\n    rebeccapurple: '#663399',\n    red: '#FF0000',\n    rosybrown: '#BC8F8F',\n    royalblue: '#4169E1',\n    saddlebrown: '#8B4513',\n    salmon: '#FA8072',\n    sandybrown: '#F4A460',\n    seagreen: '#2E8B57',\n    seashell: '#FFF5EE',\n    sienna: '#A0522D',\n    silver: '#C0C0C0',\n    skyblue: '#87CEEB',\n    slateblue: '#6A5ACD',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#FFFAFA',\n    springgreen: '#00FF7F',\n    steelblue: '#4682B4',\n    tan: '#D2B48C',\n    teal: '#008080',\n    thistle: '#D8BFD8',\n    tomato: '#FF6347',\n    turquoise: '#40E0D0',\n    violet: '#EE82EE',\n    wheat: '#F5DEB3',\n    white: '#FFFFFF',\n    whitesmoke: '#F5F5F5',\n    yellow: '#FFFF00',\n    yellowgreen: '#9ACD32'\n  }; // CSS value regexes, according to http://www.w3.org/TR/css3-values/\n\n  var css_integer = '(?:\\\\+|-)?\\\\d+';\n  var css_float = '(?:\\\\+|-)?\\\\d*\\\\.\\\\d+';\n  var css_number = '(?:' + css_integer + ')|(?:' + css_float + ')';\n  css_integer = '(' + css_integer + ')';\n  css_float = '(' + css_float + ')';\n  css_number = '(' + css_number + ')';\n  var css_percentage = css_number + '%';\n  var css_whitespace = '\\\\s*?'; // http://www.w3.org/TR/2003/CR-css3-color-20030514/\n\n  var hsl_hsla_regex = new RegExp(['^hsl(a?)\\\\(', css_number, ',', css_percentage, ',', css_percentage, '(,(', css_number, '))?\\\\)$'].join(css_whitespace));\n  var rgb_rgba_integer_regex = new RegExp(['^rgb(a?)\\\\(', css_integer, ',', css_integer, ',', css_integer, '(,(', css_number, '))?\\\\)$'].join(css_whitespace));\n  var rgb_rgba_percentage_regex = new RegExp(['^rgb(a?)\\\\(', css_percentage, ',', css_percentage, ',', css_percentage, '(,(', css_number, '))?\\\\)$'].join(css_whitespace)); // Package wide variables\n  // becomes the top level prototype object\n\n  var color;\n  /* registered_models contains the template objects for all the\n   * models that have been registered for the color class.\n   */\n\n  var registered_models = [];\n  /* factories contains methods to create new instance of\n   * different color models that have been registered.\n   */\n\n  var factories = {}; // Utility functions\n\n  /* object is Douglas Crockfords object function for prototypal\n   * inheritance.\n   */\n\n  if (!this.object) {\n    this.object = function (o) {\n      function F() {}\n\n      F.prototype = o;\n      return new F();\n    };\n  }\n\n  var object = this.object;\n  /* takes a value, converts to string if need be, then pads it\n   * to a minimum length.\n   */\n\n  function pad(val, len) {\n    val = val.toString();\n    var padded = [];\n\n    for (var i = 0, j = Math.max(len - val.length, 0); i < j; i++) {\n      padded.push('0');\n    }\n\n    padded.push(val);\n    return padded.join('');\n  }\n  /* takes a string and returns a new string with the first letter\n   * capitalised\n   */\n\n\n  function capitalise(s) {\n    return s.slice(0, 1).toUpperCase() + s.slice(1);\n  }\n  /* removes leading and trailing whitespace\n   */\n\n\n  function trim(str) {\n    return str.replace(/^\\s+|\\s+$/g, '');\n  }\n  /* used to apply a method to object non-destructively by\n   * cloning the object and then apply the method to that\n   * new object\n   */\n\n\n  function cloneOnApply(meth) {\n    return function () {\n      var cloned = this.clone();\n      meth.apply(cloned, arguments);\n      return cloned;\n    };\n  }\n  /* registerModel is used to add additional representations\n   * to the color code, and extend the color API with the new\n   * operation that model provides. see before for examples\n   */\n\n\n  function registerModel(name, model) {\n    var proto = object(color);\n    var fields = []; // used for cloning and generating accessors\n\n    var to_meth = 'to' + capitalise(name);\n\n    function convertAndApply(meth) {\n      return function () {\n        return meth.apply(this[to_meth](), arguments);\n      };\n    }\n\n    for (var key in model) if (model.hasOwnProperty(key)) {\n      proto[key] = model[key];\n      var prop = proto[key];\n\n      if (key.slice(0, 1) == '_') {\n        continue;\n      }\n\n      if (!(key in color) && \"function\" == typeof prop) {\n        // the method found on this object is a) public and b) not\n        // currently supported by the color object. Create an impl that\n        // calls the toModel function and passes that new object\n        // onto the correct method with the args.\n        color[key] = convertAndApply(prop);\n      } else if (\"function\" != typeof prop) {\n        // we have found a public property. create accessor methods\n        // and bind them up correctly\n        fields.push(key);\n        var getter = 'get' + capitalise(key);\n        var setter = 'set' + capitalise(key);\n        color[getter] = convertAndApply(proto[getter] = function (key) {\n          return function () {\n            return this[key];\n          };\n        }(key));\n        color[setter] = convertAndApply(proto[setter] = function (key) {\n          return function (val) {\n            var cloned = this.clone();\n            cloned[key] = val;\n            return cloned;\n          };\n        }(key));\n      }\n    } // end of for over model\n    // a method to create a new object - largely so prototype chains dont\n    // get insane. This uses an unrolled 'object' so that F is cached\n    // for later use. this is approx a 25% speed improvement\n\n\n    function F() {}\n\n    F.prototype = proto;\n\n    function factory() {\n      return new F();\n    }\n\n    factories[name] = factory;\n\n    proto.clone = function () {\n      var cloned = factory();\n\n      for (var i = 0, j = fields.length; i < j; i++) {\n        var key = fields[i];\n        cloned[key] = this[key];\n      }\n\n      return cloned;\n    };\n\n    color[to_meth] = function () {\n      return factory();\n    };\n\n    registered_models.push(proto);\n    return proto;\n  } // end of registerModel\n  // Template Objects\n\n  /* color is the root object in the color hierarchy. It starts\n   * life as a very simple object, but as color models are\n   * registered it has methods programmatically added to manage\n   * conversions as needed.\n   */\n\n\n  color = {\n    /* fromObject takes an argument and delegates to the internal\n     * color models to try to create a new instance.\n     */\n    fromObject: function (o) {\n      if (!o) {\n        return object(color);\n      }\n\n      for (var i = 0, j = registered_models.length; i < j; i++) {\n        var nu = registered_models[i].fromObject(o);\n\n        if (nu) {\n          return nu;\n        }\n      }\n\n      return object(color);\n    },\n    toString: function () {\n      return this.toCSS();\n    }\n  };\n  var transparent = null; // defined with an RGB later.\n\n  /* RGB is the red green blue model. This definition is converted\n   * to a template object by registerModel.\n   */\n\n  registerModel('RGB', {\n    red: 0,\n    green: 0,\n    blue: 0,\n    alpha: 0,\n\n    /* getLuminance returns a value between 0 and 1, this is the\n     * luminance calcuated according to\n     * http://www.poynton.com/notes/colour_and_gamma/ColorFAQ.html#RTFToC9\n     */\n    getLuminance: function () {\n      return this.red * 0.2126 + this.green * 0.7152 + this.blue * 0.0722;\n    },\n\n    /* does an alpha based blend of color onto this. alpha is the\n     * amount of 'color' to use. (0 to 1)\n     */\n    blend: function (color, alpha) {\n      color = color.toRGB();\n      alpha = Math.min(Math.max(alpha, 0), 1);\n      var rgb = this.clone();\n      rgb.red = rgb.red * (1 - alpha) + color.red * alpha;\n      rgb.green = rgb.green * (1 - alpha) + color.green * alpha;\n      rgb.blue = rgb.blue * (1 - alpha) + color.blue * alpha;\n      rgb.alpha = rgb.alpha * (1 - alpha) + color.alpha * alpha;\n      return rgb;\n    },\n\n    /* fromObject attempts to convert an object o to and RGB\n     * instance. This accepts an object with red, green and blue\n     * members or a string. If the string is a known CSS color name\n     * or a hexdecimal string it will accept it.\n     */\n    fromObject: function (o) {\n      if (o instanceof Array) {\n        return this._fromRGBArray(o);\n      }\n\n      if (\"string\" == typeof o) {\n        return this._fromCSS(trim(o));\n      }\n\n      if (o.hasOwnProperty('red') && o.hasOwnProperty('green') && o.hasOwnProperty('blue')) {\n        return this._fromRGB(o);\n      } // nothing matchs, not an RGB object\n\n    },\n    _stringParsers: [// CSS RGB(A) literal:\n    function (css) {\n      css = trim(css);\n      var withInteger = match(rgb_rgba_integer_regex, 255);\n\n      if (withInteger) {\n        return withInteger;\n      }\n\n      return match(rgb_rgba_percentage_regex, 100);\n\n      function match(regex, max_value) {\n        var colorGroups = css.match(regex); // If there is an \"a\" after \"rgb\", there must be a fourth parameter and the other way round\n\n        if (!colorGroups || !!colorGroups[1] + !!colorGroups[5] === 1) {\n          return null;\n        }\n\n        var rgb = factories.RGB();\n        rgb.red = Math.min(1, Math.max(0, colorGroups[2] / max_value));\n        rgb.green = Math.min(1, Math.max(0, colorGroups[3] / max_value));\n        rgb.blue = Math.min(1, Math.max(0, colorGroups[4] / max_value));\n        rgb.alpha = !!colorGroups[5] ? Math.min(Math.max(parseFloat(colorGroups[6]), 0), 1) : 1;\n        return rgb;\n      }\n    }, function (css) {\n      var lower = css.toLowerCase();\n\n      if (lower in css_colors) {\n        css = css_colors[lower];\n      }\n\n      if (!css.match(/^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/)) {\n        return;\n      }\n\n      css = css.replace(/^#/, '');\n      var bytes = css.length / 3;\n      var max = Math.pow(16, bytes) - 1;\n      var rgb = factories.RGB();\n      rgb.red = parseInt(css.slice(0, bytes), 16) / max;\n      rgb.green = parseInt(css.slice(bytes * 1, bytes * 2), 16) / max;\n      rgb.blue = parseInt(css.slice(bytes * 2), 16) / max;\n      rgb.alpha = 1;\n      return rgb;\n    }, function (css) {\n      if (css.toLowerCase() !== 'transparent') return;\n      return transparent;\n    }],\n    _fromCSS: function (css) {\n      var color = null;\n\n      for (var i = 0, j = this._stringParsers.length; i < j; i++) {\n        color = this._stringParsers[i](css);\n        if (color) return color;\n      }\n    },\n    _fromRGB: function (RGB) {\n      var newRGB = factories.RGB();\n      newRGB.red = RGB.red;\n      newRGB.green = RGB.green;\n      newRGB.blue = RGB.blue;\n      newRGB.alpha = RGB.hasOwnProperty('alpha') ? RGB.alpha : 1;\n      return newRGB;\n    },\n    _fromRGBArray: function (RGB) {\n      var newRGB = factories.RGB();\n      newRGB.red = Math.max(0, Math.min(1, RGB[0] / 255));\n      newRGB.green = Math.max(0, Math.min(1, RGB[1] / 255));\n      newRGB.blue = Math.max(0, Math.min(1, RGB[2] / 255));\n      newRGB.alpha = RGB[3] !== undefined ? Math.max(0, Math.min(1, RGB[3])) : 1;\n      return newRGB;\n    },\n    // convert to a CSS string. defaults to two bytes a value\n    toCSSHex: function (bytes) {\n      bytes = bytes || 2;\n      var max = Math.pow(16, bytes) - 1;\n      var css = [\"#\", pad(Math.round(this.red * max).toString(16).toUpperCase(), bytes), pad(Math.round(this.green * max).toString(16).toUpperCase(), bytes), pad(Math.round(this.blue * max).toString(16).toUpperCase(), bytes)];\n      return css.join('');\n    },\n    toCSS: function (bytes) {\n      if (this.alpha === 1) return this.toCSSHex(bytes);\n      var max = 255;\n      var components = ['rgba(', Math.max(0, Math.min(max, Math.round(this.red * max))), ',', Math.max(0, Math.min(max, Math.round(this.green * max))), ',', Math.max(0, Math.min(max, Math.round(this.blue * max))), ',', Math.max(0, Math.min(1, this.alpha)), ')'];\n      return components.join('');\n    },\n    toHSV: function () {\n      var hsv = factories.HSV();\n      var min, max, delta;\n      min = Math.min(this.red, this.green, this.blue);\n      max = Math.max(this.red, this.green, this.blue);\n      hsv.value = max; // v\n\n      delta = max - min;\n\n      if (delta == 0) {\n        // white, grey, black\n        hsv.hue = hsv.saturation = 0;\n      } else {\n        // chroma\n        hsv.saturation = delta / max;\n\n        if (this.red == max) {\n          hsv.hue = (this.green - this.blue) / delta; // between yellow & magenta\n        } else if (this.green == max) {\n          hsv.hue = 2 + (this.blue - this.red) / delta; // between cyan & yellow\n        } else {\n          hsv.hue = 4 + (this.red - this.green) / delta; // between magenta & cyan\n        }\n\n        hsv.hue = (hsv.hue * 60 + 360) % 360; // degrees\n      }\n\n      hsv.alpha = this.alpha;\n      return hsv;\n    },\n    toHSL: function () {\n      return this.toHSV().toHSL();\n    },\n    toRGB: function () {\n      return this.clone();\n    }\n  });\n  transparent = color.fromObject({\n    red: 0,\n    blue: 0,\n    green: 0,\n    alpha: 0\n  });\n  /* Like RGB above, this object describes what will become the HSV\n   * template object. This model handles hue, saturation and value.\n   * hue is the number of degrees around the color wheel, saturation\n   * describes how much color their is and value is the brightness.\n   */\n\n  registerModel('HSV', {\n    hue: 0,\n    saturation: 0,\n    value: 1,\n    alpha: 1,\n    shiftHue: cloneOnApply(function (degrees) {\n      var hue = (this.hue + degrees) % 360;\n\n      if (hue < 0) {\n        hue = (360 + hue) % 360;\n      }\n\n      this.hue = hue;\n    }),\n    devalueByAmount: cloneOnApply(function (val) {\n      this.value = Math.min(1, Math.max(this.value - val, 0));\n    }),\n    devalueByRatio: cloneOnApply(function (val) {\n      this.value = Math.min(1, Math.max(this.value * (1 - val), 0));\n    }),\n    valueByAmount: cloneOnApply(function (val) {\n      this.value = Math.min(1, Math.max(this.value + val, 0));\n    }),\n    valueByRatio: cloneOnApply(function (val) {\n      this.value = Math.min(1, Math.max(this.value * (1 + val), 0));\n    }),\n    desaturateByAmount: cloneOnApply(function (val) {\n      this.saturation = Math.min(1, Math.max(this.saturation - val, 0));\n    }),\n    desaturateByRatio: cloneOnApply(function (val) {\n      this.saturation = Math.min(1, Math.max(this.saturation * (1 - val), 0));\n    }),\n    saturateByAmount: cloneOnApply(function (val) {\n      this.saturation = Math.min(1, Math.max(this.saturation + val, 0));\n    }),\n    saturateByRatio: cloneOnApply(function (val) {\n      this.saturation = Math.min(1, Math.max(this.saturation * (1 + val), 0));\n    }),\n    schemeFromDegrees: function (degrees) {\n      var newColors = [];\n\n      for (var i = 0, j = degrees.length; i < j; i++) {\n        var col = this.clone();\n        col.hue = (this.hue + degrees[i]) % 360;\n        newColors.push(col);\n      }\n\n      return newColors;\n    },\n    complementaryScheme: function () {\n      return this.schemeFromDegrees([0, 180]);\n    },\n    splitComplementaryScheme: function () {\n      return this.schemeFromDegrees([0, 150, 320]);\n    },\n    splitComplementaryCWScheme: function () {\n      return this.schemeFromDegrees([0, 150, 300]);\n    },\n    splitComplementaryCCWScheme: function () {\n      return this.schemeFromDegrees([0, 60, 210]);\n    },\n    triadicScheme: function () {\n      return this.schemeFromDegrees([0, 120, 240]);\n    },\n    clashScheme: function () {\n      return this.schemeFromDegrees([0, 90, 270]);\n    },\n    tetradicScheme: function () {\n      return this.schemeFromDegrees([0, 90, 180, 270]);\n    },\n    fourToneCWScheme: function () {\n      return this.schemeFromDegrees([0, 60, 180, 240]);\n    },\n    fourToneCCWScheme: function () {\n      return this.schemeFromDegrees([0, 120, 180, 300]);\n    },\n    fiveToneAScheme: function () {\n      return this.schemeFromDegrees([0, 115, 155, 205, 245]);\n    },\n    fiveToneBScheme: function () {\n      return this.schemeFromDegrees([0, 40, 90, 130, 245]);\n    },\n    fiveToneCScheme: function () {\n      return this.schemeFromDegrees([0, 50, 90, 205, 320]);\n    },\n    fiveToneDScheme: function () {\n      return this.schemeFromDegrees([0, 40, 155, 270, 310]);\n    },\n    fiveToneEScheme: function () {\n      return this.schemeFromDegrees([0, 115, 230, 270, 320]);\n    },\n    sixToneCWScheme: function () {\n      return this.schemeFromDegrees([0, 30, 120, 150, 240, 270]);\n    },\n    sixToneCCWScheme: function () {\n      return this.schemeFromDegrees([0, 90, 120, 210, 240, 330]);\n    },\n    neutralScheme: function () {\n      return this.schemeFromDegrees([0, 15, 30, 45, 60, 75]);\n    },\n    analogousScheme: function () {\n      return this.schemeFromDegrees([0, 30, 60, 90, 120, 150]);\n    },\n    fromObject: function (o) {\n      if (o.hasOwnProperty('hue') && o.hasOwnProperty('saturation') && o.hasOwnProperty('value')) {\n        var hsv = factories.HSV();\n        hsv.hue = o.hue;\n        hsv.saturation = o.saturation;\n        hsv.value = o.value;\n        hsv.alpha = o.hasOwnProperty('alpha') ? o.alpha : 1;\n        return hsv;\n      } // nothing matches, not an HSV object\n\n\n      return null;\n    },\n    _normalise: function () {\n      this.hue %= 360;\n      this.saturation = Math.min(Math.max(0, this.saturation), 1);\n      this.value = Math.min(Math.max(0, this.value));\n      this.alpha = Math.min(1, Math.max(0, this.alpha));\n    },\n    toRGB: function () {\n      this._normalise();\n\n      var rgb = factories.RGB();\n      var i;\n      var f, p, q, t;\n\n      if (this.saturation === 0) {\n        // achromatic (grey)\n        rgb.red = this.value;\n        rgb.green = this.value;\n        rgb.blue = this.value;\n        rgb.alpha = this.alpha;\n        return rgb;\n      }\n\n      var h = this.hue / 60; // sector 0 to 5\n\n      i = Math.floor(h);\n      f = h - i; // factorial part of h\n\n      p = this.value * (1 - this.saturation);\n      q = this.value * (1 - this.saturation * f);\n      t = this.value * (1 - this.saturation * (1 - f));\n\n      switch (i) {\n        case 0:\n          rgb.red = this.value;\n          rgb.green = t;\n          rgb.blue = p;\n          break;\n\n        case 1:\n          rgb.red = q;\n          rgb.green = this.value;\n          rgb.blue = p;\n          break;\n\n        case 2:\n          rgb.red = p;\n          rgb.green = this.value;\n          rgb.blue = t;\n          break;\n\n        case 3:\n          rgb.red = p;\n          rgb.green = q;\n          rgb.blue = this.value;\n          break;\n\n        case 4:\n          rgb.red = t;\n          rgb.green = p;\n          rgb.blue = this.value;\n          break;\n\n        default:\n          // case 5:\n          rgb.red = this.value;\n          rgb.green = p;\n          rgb.blue = q;\n          break;\n      }\n\n      rgb.alpha = this.alpha;\n      return rgb;\n    },\n    toHSL: function () {\n      this._normalise();\n\n      var hsl = factories.HSL();\n      hsl.hue = this.hue;\n      var l = (2 - this.saturation) * this.value,\n          s = this.saturation * this.value;\n\n      if (l && 2 - l) {\n        s /= l <= 1 ? l : 2 - l;\n      }\n\n      l /= 2;\n      hsl.saturation = s;\n      hsl.lightness = l;\n      hsl.alpha = this.alpha;\n      return hsl;\n    },\n    toHSV: function () {\n      return this.clone();\n    }\n  });\n  registerModel('HSL', {\n    hue: 0,\n    saturation: 0,\n    lightness: 0,\n    alpha: 1,\n    darkenByAmount: cloneOnApply(function (val) {\n      this.lightness = Math.min(1, Math.max(this.lightness - val, 0));\n    }),\n    darkenByRatio: cloneOnApply(function (val) {\n      this.lightness = Math.min(1, Math.max(this.lightness * (1 - val), 0));\n    }),\n    lightenByAmount: cloneOnApply(function (val) {\n      this.lightness = Math.min(1, Math.max(this.lightness + val, 0));\n    }),\n    lightenByRatio: cloneOnApply(function (val) {\n      this.lightness = Math.min(1, Math.max(this.lightness * (1 + val), 0));\n    }),\n    fromObject: function (o) {\n      if (\"string\" == typeof o) {\n        return this._fromCSS(o);\n      }\n\n      if (o.hasOwnProperty('hue') && o.hasOwnProperty('saturation') && o.hasOwnProperty('lightness')) {\n        return this._fromHSL(o);\n      } // nothing matchs, not an RGB object\n\n    },\n    _fromCSS: function (css) {\n      var colorGroups = trim(css).match(hsl_hsla_regex); // if there is an \"a\" after \"hsl\", there must be a fourth parameter and the other way round\n\n      if (!colorGroups || !!colorGroups[1] + !!colorGroups[5] === 1) {\n        return null;\n      }\n\n      var hsl = factories.HSL();\n      hsl.hue = (colorGroups[2] % 360 + 360) % 360;\n      hsl.saturation = Math.max(0, Math.min(parseInt(colorGroups[3], 10) / 100, 1));\n      hsl.lightness = Math.max(0, Math.min(parseInt(colorGroups[4], 10) / 100, 1));\n      hsl.alpha = !!colorGroups[5] ? Math.max(0, Math.min(1, parseFloat(colorGroups[6]))) : 1;\n      return hsl;\n    },\n    _fromHSL: function (HSL) {\n      var newHSL = factories.HSL();\n      newHSL.hue = HSL.hue;\n      newHSL.saturation = HSL.saturation;\n      newHSL.lightness = HSL.lightness;\n      newHSL.alpha = HSL.hasOwnProperty('alpha') ? HSL.alpha : 1;\n      return newHSL;\n    },\n    _normalise: function () {\n      this.hue = (this.hue % 360 + 360) % 360;\n      this.saturation = Math.min(Math.max(0, this.saturation), 1);\n      this.lightness = Math.min(Math.max(0, this.lightness));\n      this.alpha = Math.min(1, Math.max(0, this.alpha));\n    },\n    toHSL: function () {\n      return this.clone();\n    },\n    toHSV: function () {\n      this._normalise();\n\n      var hsv = factories.HSV(); // http://ariya.blogspot.com/2008/07/converting-between-hsl-and-hsv.html\n\n      hsv.hue = this.hue; // H\n\n      var l = 2 * this.lightness,\n          s = this.saturation * (l <= 1 ? l : 2 - l);\n      hsv.value = (l + s) / 2; // V\n\n      hsv.saturation = 2 * s / (l + s) || 0; // S\n\n      hsv.alpha = this.alpha;\n      return hsv;\n    },\n    toRGB: function () {\n      return this.toHSV().toRGB();\n    }\n  }); // Package specific exports\n\n  /* the Color function is a factory for new color objects.\n   */\n\n  function Color(o) {\n    return color.fromObject(o);\n  }\n\n  Color.isValid = function (str) {\n    var key,\n        c = Color(str);\n    var length = 0;\n\n    for (key in c) {\n      if (c.hasOwnProperty(key)) {\n        length++;\n      }\n    }\n\n    return length > 0;\n  };\n\n  net.brehaut.Color = Color;\n}).call(net.brehaut);\n/* Export to CommonJS\n */\n\nif (typeof module !== 'undefined') {\n  module.exports = net.brehaut.Color;\n}","map":{"version":3,"sources":["F:/my-app/node_modules/color-js/color.js"],"names":["net","brehaut","css_colors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","css_integer","css_float","css_number","css_percentage","css_whitespace","hsl_hsla_regex","RegExp","join","rgb_rgba_integer_regex","rgb_rgba_percentage_regex","color","registered_models","factories","object","o","F","prototype","pad","val","len","toString","padded","i","j","Math","max","length","push","capitalise","s","slice","toUpperCase","trim","str","replace","cloneOnApply","meth","cloned","clone","apply","arguments","registerModel","name","model","proto","fields","to_meth","convertAndApply","key","hasOwnProperty","prop","getter","setter","factory","fromObject","nu","toCSS","transparent","alpha","getLuminance","blend","toRGB","min","rgb","Array","_fromRGBArray","_fromCSS","_fromRGB","_stringParsers","css","withInteger","match","regex","max_value","colorGroups","RGB","parseFloat","lower","toLowerCase","bytes","pow","parseInt","newRGB","undefined","toCSSHex","round","components","toHSV","hsv","HSV","delta","value","hue","saturation","toHSL","shiftHue","degrees","devalueByAmount","devalueByRatio","valueByAmount","valueByRatio","desaturateByAmount","desaturateByRatio","saturateByAmount","saturateByRatio","schemeFromDegrees","newColors","col","complementaryScheme","splitComplementaryScheme","splitComplementaryCWScheme","splitComplementaryCCWScheme","triadicScheme","clashScheme","tetradicScheme","fourToneCWScheme","fourToneCCWScheme","fiveToneAScheme","fiveToneBScheme","fiveToneCScheme","fiveToneDScheme","fiveToneEScheme","sixToneCWScheme","sixToneCCWScheme","neutralScheme","analogousScheme","_normalise","f","p","q","t","h","floor","hsl","HSL","l","lightness","darkenByAmount","darkenByRatio","lightenByAmount","lightenByRatio","_fromHSL","newHSL","Color","isValid","c","call","module","exports"],"mappings":"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","sourcesContent":["// Copyright (c) 2008-2013, Andrew Brehaut, Tim Baumann, Matt Wilson, \n//                          Simon Heimler, Michel Vielmetter \n//\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n// * Redistributions of source code must retain the above copyright notice,\n//   this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above copyright notice,\n//   this list of conditions and the following disclaimer in the documentation\n//   and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\n// color.js - version 1.0.1\n//\n// HSV <-> RGB code based on code from http://www.cs.rit.edu/~ncs/color/t_convert.html\n// object function created by Douglas Crockford.\n// Color scheme degrees taken from the colorjack.com colorpicker\n//\n// HSL support kindly provided by Tim Baumann - http://github.com/timjb\n\n// create namespaces\n/*global net */\nif (\"undefined\" == typeof net) {\n    var net = {};\n}\nif (!net.brehaut) {\n    net.brehaut = {};\n}\n\n// this module function is called with net.brehaut as 'this'\n(function() {\n    \"use strict\";\n    // Constants\n\n    // css_colors maps color names onto their hex values\n    // these names are defined by W3C\n    \n    var css_colors = {aliceblue:'#F0F8FF',antiquewhite:'#FAEBD7',aqua:'#00FFFF',aquamarine:'#7FFFD4',azure:'#F0FFFF',beige:'#F5F5DC',bisque:'#FFE4C4',black:'#000000',blanchedalmond:'#FFEBCD',blue:'#0000FF',blueviolet:'#8A2BE2',brown:'#A52A2A',burlywood:'#DEB887',cadetblue:'#5F9EA0',chartreuse:'#7FFF00',chocolate:'#D2691E',coral:'#FF7F50',cornflowerblue:'#6495ED',cornsilk:'#FFF8DC',crimson:'#DC143C',cyan:'#00FFFF',darkblue:'#00008B',darkcyan:'#008B8B',darkgoldenrod:'#B8860B',darkgray:'#A9A9A9',darkgrey:'#A9A9A9',darkgreen:'#006400',darkkhaki:'#BDB76B',darkmagenta:'#8B008B',darkolivegreen:'#556B2F',darkorange:'#FF8C00',darkorchid:'#9932CC',darkred:'#8B0000',darksalmon:'#E9967A',darkseagreen:'#8FBC8F',darkslateblue:'#483D8B',darkslategray:'#2F4F4F',darkslategrey:'#2F4F4F',darkturquoise:'#00CED1',darkviolet:'#9400D3',deeppink:'#FF1493',deepskyblue:'#00BFFF',dimgray:'#696969',dimgrey:'#696969',dodgerblue:'#1E90FF',firebrick:'#B22222',floralwhite:'#FFFAF0',forestgreen:'#228B22',fuchsia:'#FF00FF',gainsboro:'#DCDCDC',ghostwhite:'#F8F8FF',gold:'#FFD700',goldenrod:'#DAA520',gray:'#808080',grey:'#808080',green:'#008000',greenyellow:'#ADFF2F',honeydew:'#F0FFF0',hotpink:'#FF69B4',indianred:'#CD5C5C',indigo:'#4B0082',ivory:'#FFFFF0',khaki:'#F0E68C',lavender:'#E6E6FA',lavenderblush:'#FFF0F5',lawngreen:'#7CFC00',lemonchiffon:'#FFFACD',lightblue:'#ADD8E6',lightcoral:'#F08080',lightcyan:'#E0FFFF',lightgoldenrodyellow:'#FAFAD2',lightgray:'#D3D3D3',lightgrey:'#D3D3D3',lightgreen:'#90EE90',lightpink:'#FFB6C1',lightsalmon:'#FFA07A',lightseagreen:'#20B2AA',lightskyblue:'#87CEFA',lightslategray:'#778899',lightslategrey:'#778899',lightsteelblue:'#B0C4DE',lightyellow:'#FFFFE0',lime:'#00FF00',limegreen:'#32CD32',linen:'#FAF0E6',magenta:'#FF00FF',maroon:'#800000',mediumaquamarine:'#66CDAA',mediumblue:'#0000CD',mediumorchid:'#BA55D3',mediumpurple:'#9370D8',mediumseagreen:'#3CB371',mediumslateblue:'#7B68EE',mediumspringgreen:'#00FA9A',mediumturquoise:'#48D1CC',mediumvioletred:'#C71585',midnightblue:'#191970',mintcream:'#F5FFFA',mistyrose:'#FFE4E1',moccasin:'#FFE4B5',navajowhite:'#FFDEAD',navy:'#000080',oldlace:'#FDF5E6',olive:'#808000',olivedrab:'#6B8E23',orange:'#FFA500',orangered:'#FF4500',orchid:'#DA70D6',palegoldenrod:'#EEE8AA',palegreen:'#98FB98',paleturquoise:'#AFEEEE',palevioletred:'#D87093',papayawhip:'#FFEFD5',peachpuff:'#FFDAB9',peru:'#CD853F',pink:'#FFC0CB',plum:'#DDA0DD',powderblue:'#B0E0E6',purple:'#800080',rebeccapurple:'#663399',red:'#FF0000',rosybrown:'#BC8F8F',royalblue:'#4169E1',saddlebrown:'#8B4513',salmon:'#FA8072',sandybrown:'#F4A460',seagreen:'#2E8B57',seashell:'#FFF5EE',sienna:'#A0522D',silver:'#C0C0C0',skyblue:'#87CEEB',slateblue:'#6A5ACD',slategray:'#708090',slategrey:'#708090',snow:'#FFFAFA',springgreen:'#00FF7F',steelblue:'#4682B4',tan:'#D2B48C',teal:'#008080',thistle:'#D8BFD8',tomato:'#FF6347',turquoise:'#40E0D0',violet:'#EE82EE',wheat:'#F5DEB3',white:'#FFFFFF',whitesmoke:'#F5F5F5',yellow:'#FFFF00',yellowgreen:'#9ACD32'};\n\n\n    // CSS value regexes, according to http://www.w3.org/TR/css3-values/\n    var css_integer = '(?:\\\\+|-)?\\\\d+';\n    var css_float = '(?:\\\\+|-)?\\\\d*\\\\.\\\\d+';\n    var css_number = '(?:' + css_integer + ')|(?:' + css_float + ')';\n    css_integer = '(' + css_integer + ')';\n    css_float = '(' + css_float + ')';\n    css_number = '(' + css_number + ')';\n    var css_percentage = css_number + '%';\n    var css_whitespace = '\\\\s*?';\n\n    // http://www.w3.org/TR/2003/CR-css3-color-20030514/\n    var hsl_hsla_regex = new RegExp([\n        '^hsl(a?)\\\\(', css_number, ',', css_percentage, ',', css_percentage, '(,(', css_number, '))?\\\\)$'\n    ].join(css_whitespace));\n    var rgb_rgba_integer_regex = new RegExp([\n        '^rgb(a?)\\\\(', css_integer, ',', css_integer, ',', css_integer, '(,(', css_number, '))?\\\\)$'\n    ].join(css_whitespace));\n    var rgb_rgba_percentage_regex = new RegExp([\n        '^rgb(a?)\\\\(', css_percentage, ',', css_percentage, ',', css_percentage, '(,(', css_number, '))?\\\\)$'\n    ].join(css_whitespace));\n\n    // Package wide variables\n\n    // becomes the top level prototype object\n    var color;\n\n    /* registered_models contains the template objects for all the\n     * models that have been registered for the color class.\n     */\n    var registered_models = [];\n\n\n    /* factories contains methods to create new instance of\n     * different color models that have been registered.\n     */\n    var factories = {};\n\n    // Utility functions\n\n    /* object is Douglas Crockfords object function for prototypal\n     * inheritance.\n     */\n    if (!this.object) {\n        this.object = function(o) {\n            function F() {}\n            F.prototype = o;\n            return new F();\n        };\n    }\n    var object = this.object;\n\n    /* takes a value, converts to string if need be, then pads it\n     * to a minimum length.\n     */\n    function pad(val, len) {\n        val = val.toString();\n        var padded = [];\n\n        for (var i = 0, j = Math.max(len - val.length, 0); i < j; i++) {\n            padded.push('0');\n        }\n\n        padded.push(val);\n        return padded.join('');\n    }\n\n\n    /* takes a string and returns a new string with the first letter\n     * capitalised\n     */\n    function capitalise(s) {\n        return s.slice(0, 1).toUpperCase() + s.slice(1);\n    }\n\n    /* removes leading and trailing whitespace\n     */\n    function trim(str) {\n        return str.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    /* used to apply a method to object non-destructively by\n     * cloning the object and then apply the method to that\n     * new object\n     */\n    function cloneOnApply(meth) {\n        return function() {\n            var cloned = this.clone();\n            meth.apply(cloned, arguments);\n            return cloned;\n        };\n    }\n\n\n    /* registerModel is used to add additional representations\n     * to the color code, and extend the color API with the new\n     * operation that model provides. see before for examples\n     */\n    function registerModel(name, model) {\n        var proto = object(color);\n        var fields = []; // used for cloning and generating accessors\n\n        var to_meth = 'to' + capitalise(name);\n\n        function convertAndApply(meth) {\n            return function() {\n                return meth.apply(this[to_meth](), arguments);\n            };\n        }\n\n        for (var key in model)\n            if (model.hasOwnProperty(key)) {\n                proto[key] = model[key];\n                var prop = proto[key];\n\n                if (key.slice(0, 1) == '_') {\n                    continue;\n                }\n                if (!(key in color) && \"function\" == typeof prop) {\n                    // the method found on this object is a) public and b) not\n                    // currently supported by the color object. Create an impl that\n                    // calls the toModel function and passes that new object\n                    // onto the correct method with the args.\n                    color[key] = convertAndApply(prop);\n                } else if (\"function\" != typeof prop) {\n                    // we have found a public property. create accessor methods\n                    // and bind them up correctly\n                    fields.push(key);\n                    var getter = 'get' + capitalise(key);\n                    var setter = 'set' + capitalise(key);\n\n                    color[getter] = convertAndApply(\n                        proto[getter] = (function(key) {\n                            return function() {\n                                return this[key];\n                            };\n                        })(key)\n                    );\n\n                    color[setter] = convertAndApply(\n                        proto[setter] = (function(key) {\n                            return function(val) {\n                                var cloned = this.clone();\n                                cloned[key] = val;\n                                return cloned;\n                            };\n                        })(key)\n                    );\n                }\n            } // end of for over model\n\n            // a method to create a new object - largely so prototype chains dont\n            // get insane. This uses an unrolled 'object' so that F is cached\n            // for later use. this is approx a 25% speed improvement\n\n        function F() {}\n        F.prototype = proto;\n\n        function factory() {\n            return new F();\n        }\n        factories[name] = factory;\n\n        proto.clone = function() {\n            var cloned = factory();\n            for (var i = 0, j = fields.length; i < j; i++) {\n                var key = fields[i];\n                cloned[key] = this[key];\n            }\n            return cloned;\n        };\n\n        color[to_meth] = function() {\n            return factory();\n        };\n\n        registered_models.push(proto);\n\n        return proto;\n    } // end of registerModel\n\n    // Template Objects\n\n    /* color is the root object in the color hierarchy. It starts\n     * life as a very simple object, but as color models are\n     * registered it has methods programmatically added to manage\n     * conversions as needed.\n     */\n    color = {\n        /* fromObject takes an argument and delegates to the internal\n         * color models to try to create a new instance.\n         */\n        fromObject: function(o) {\n            if (!o) {\n                return object(color);\n            }\n\n            for (var i = 0, j = registered_models.length; i < j; i++) {\n                var nu = registered_models[i].fromObject(o);\n                if (nu) {\n                    return nu;\n                }\n            }\n\n            return object(color);\n        },\n\n        toString: function() {\n            return this.toCSS();\n        }\n    };\n\n    var transparent = null; // defined with an RGB later.\n\n    /* RGB is the red green blue model. This definition is converted\n     * to a template object by registerModel.\n     */\n    registerModel('RGB', {\n        red: 0,\n        green: 0,\n        blue: 0,\n        alpha: 0,\n\n        /* getLuminance returns a value between 0 and 1, this is the\n         * luminance calcuated according to\n         * http://www.poynton.com/notes/colour_and_gamma/ColorFAQ.html#RTFToC9\n         */\n        getLuminance: function() {\n            return (this.red * 0.2126) + (this.green * 0.7152) + (this.blue * 0.0722);\n        },\n\n        /* does an alpha based blend of color onto this. alpha is the\n         * amount of 'color' to use. (0 to 1)\n         */\n        blend: function(color, alpha) {\n            color = color.toRGB();\n            alpha = Math.min(Math.max(alpha, 0), 1);\n            var rgb = this.clone();\n\n            rgb.red = (rgb.red * (1 - alpha)) + (color.red * alpha);\n            rgb.green = (rgb.green * (1 - alpha)) + (color.green * alpha);\n            rgb.blue = (rgb.blue * (1 - alpha)) + (color.blue * alpha);\n            rgb.alpha = (rgb.alpha * (1 - alpha)) + (color.alpha * alpha);\n\n            return rgb;\n        },\n\n        /* fromObject attempts to convert an object o to and RGB\n         * instance. This accepts an object with red, green and blue\n         * members or a string. If the string is a known CSS color name\n         * or a hexdecimal string it will accept it.\n         */\n        fromObject: function(o) {\n            if (o instanceof Array) {\n                return this._fromRGBArray(o);\n            }\n            if (\"string\" == typeof o) {\n                return this._fromCSS(trim(o));\n            }\n            if (o.hasOwnProperty('red') &&\n                o.hasOwnProperty('green') &&\n                o.hasOwnProperty('blue')) {\n                return this._fromRGB(o);\n            }\n            // nothing matchs, not an RGB object\n        },\n\n        _stringParsers: [\n            // CSS RGB(A) literal:\n            function(css) {\n                css = trim(css);\n\n                var withInteger = match(rgb_rgba_integer_regex, 255);\n                if (withInteger) {\n                    return withInteger;\n                }\n                return match(rgb_rgba_percentage_regex, 100);\n\n                function match(regex, max_value) {\n                    var colorGroups = css.match(regex);\n\n                    // If there is an \"a\" after \"rgb\", there must be a fourth parameter and the other way round\n                    if (!colorGroups || (!!colorGroups[1] + !!colorGroups[5] === 1)) {\n                        return null;\n                    }\n\n                    var rgb = factories.RGB();\n                    rgb.red = Math.min(1, Math.max(0, colorGroups[2] / max_value));\n                    rgb.green = Math.min(1, Math.max(0, colorGroups[3] / max_value));\n                    rgb.blue = Math.min(1, Math.max(0, colorGroups[4] / max_value));\n                    rgb.alpha = !!colorGroups[5] ? Math.min(Math.max(parseFloat(colorGroups[6]), 0), 1) : 1;\n\n                    return rgb;\n                }\n            },\n\n            function(css) {\n                var lower = css.toLowerCase();\n                if (lower in css_colors) {\n                    css = css_colors[lower];\n                }\n\n                if (!css.match(/^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/)) {\n                    return;\n                }\n\n                css = css.replace(/^#/, '');\n\n                var bytes = css.length / 3;\n\n                var max = Math.pow(16, bytes) - 1;\n\n                var rgb = factories.RGB();\n                rgb.red = parseInt(css.slice(0, bytes), 16) / max;\n                rgb.green = parseInt(css.slice(bytes * 1, bytes * 2), 16) / max;\n                rgb.blue = parseInt(css.slice(bytes * 2), 16) / max;\n                rgb.alpha = 1;\n                return rgb;\n            },\n\n            function(css) {\n                if (css.toLowerCase() !== 'transparent') return;\n\n                return transparent;\n            }\n        ],\n\n        _fromCSS: function(css) {\n            var color = null;\n            for (var i = 0, j = this._stringParsers.length; i < j; i++) {\n                color = this._stringParsers[i](css);\n                if (color) return color;\n            }\n        },\n\n        _fromRGB: function(RGB) {\n            var newRGB = factories.RGB();\n\n            newRGB.red = RGB.red;\n            newRGB.green = RGB.green;\n            newRGB.blue = RGB.blue;\n            newRGB.alpha = RGB.hasOwnProperty('alpha') ? RGB.alpha : 1;\n\n            return newRGB;\n        },\n\n        _fromRGBArray: function(RGB) {\n            var newRGB = factories.RGB();\n\n            newRGB.red = Math.max(0, Math.min(1, RGB[0] / 255));\n            newRGB.green = Math.max(0, Math.min(1, RGB[1] / 255));\n            newRGB.blue = Math.max(0, Math.min(1, RGB[2] / 255));\n            newRGB.alpha = RGB[3] !== undefined ? Math.max(0, Math.min(1, RGB[3])) : 1;\n\n            return newRGB;\n        },\n\n        // convert to a CSS string. defaults to two bytes a value\n        toCSSHex: function(bytes) {\n            bytes = bytes || 2;\n\n            var max = Math.pow(16, bytes) - 1;\n            var css = [\n                \"#\",\n                pad(Math.round(this.red * max).toString(16).toUpperCase(), bytes),\n                pad(Math.round(this.green * max).toString(16).toUpperCase(), bytes),\n                pad(Math.round(this.blue * max).toString(16).toUpperCase(), bytes)\n            ];\n\n            return css.join('');\n        },\n\n        toCSS: function(bytes) {\n            if (this.alpha === 1) return this.toCSSHex(bytes);\n\n            var max = 255;\n\n            var components = [\n                'rgba(',\n                Math.max(0, Math.min(max, Math.round(this.red * max))), ',',\n                Math.max(0, Math.min(max, Math.round(this.green * max))), ',',\n                Math.max(0, Math.min(max, Math.round(this.blue * max))), ',',\n                Math.max(0, Math.min(1, this.alpha)),\n                ')'\n            ];\n\n            return components.join('');\n        },\n\n        toHSV: function() {\n            var hsv = factories.HSV();\n            var min, max, delta;\n\n            min = Math.min(this.red, this.green, this.blue);\n            max = Math.max(this.red, this.green, this.blue);\n            hsv.value = max; // v\n\n            delta = max - min;\n\n            if (delta == 0) { // white, grey, black\n                hsv.hue = hsv.saturation = 0;\n            } else { // chroma\n                hsv.saturation = delta / max;\n\n                if (this.red == max) {\n                    hsv.hue = (this.green - this.blue) / delta; // between yellow & magenta\n                } else if (this.green == max) {\n                    hsv.hue = 2 + (this.blue - this.red) / delta; // between cyan & yellow\n                } else {\n                    hsv.hue = 4 + (this.red - this.green) / delta; // between magenta & cyan\n                }\n\n                hsv.hue = ((hsv.hue * 60) + 360) % 360; // degrees\n            }\n\n            hsv.alpha = this.alpha;\n\n            return hsv;\n        },\n        toHSL: function() {\n            return this.toHSV().toHSL();\n        },\n\n        toRGB: function() {\n            return this.clone();\n        }\n    });\n\n    transparent = color.fromObject({\n        red: 0,\n        blue: 0,\n        green: 0,\n        alpha: 0\n    });\n\n\n    /* Like RGB above, this object describes what will become the HSV\n     * template object. This model handles hue, saturation and value.\n     * hue is the number of degrees around the color wheel, saturation\n     * describes how much color their is and value is the brightness.\n     */\n    registerModel('HSV', {\n        hue: 0,\n        saturation: 0,\n        value: 1,\n        alpha: 1,\n\n        shiftHue: cloneOnApply(function(degrees) {\n            var hue = (this.hue + degrees) % 360;\n            if (hue < 0) {\n                hue = (360 + hue) % 360;\n            }\n\n            this.hue = hue;\n        }),\n\n        devalueByAmount: cloneOnApply(function(val) {\n            this.value = Math.min(1, Math.max(this.value - val, 0));\n        }),\n\n        devalueByRatio: cloneOnApply(function(val) {\n            this.value = Math.min(1, Math.max(this.value * (1 - val), 0));\n        }),\n\n        valueByAmount: cloneOnApply(function(val) {\n            this.value = Math.min(1, Math.max(this.value + val, 0));\n        }),\n\n        valueByRatio: cloneOnApply(function(val) {\n            this.value = Math.min(1, Math.max(this.value * (1 + val), 0));\n        }),\n\n        desaturateByAmount: cloneOnApply(function(val) {\n            this.saturation = Math.min(1, Math.max(this.saturation - val, 0));\n        }),\n\n        desaturateByRatio: cloneOnApply(function(val) {\n            this.saturation = Math.min(1, Math.max(this.saturation * (1 - val), 0));\n        }),\n\n        saturateByAmount: cloneOnApply(function(val) {\n            this.saturation = Math.min(1, Math.max(this.saturation + val, 0));\n        }),\n\n        saturateByRatio: cloneOnApply(function(val) {\n            this.saturation = Math.min(1, Math.max(this.saturation * (1 + val), 0));\n        }),\n\n        schemeFromDegrees: function(degrees) {\n            var newColors = [];\n            for (var i = 0, j = degrees.length; i < j; i++) {\n                var col = this.clone();\n                col.hue = (this.hue + degrees[i]) % 360;\n                newColors.push(col);\n            }\n            return newColors;\n        },\n\n        complementaryScheme: function() {\n            return this.schemeFromDegrees([0, 180]);\n        },\n\n        splitComplementaryScheme: function() {\n            return this.schemeFromDegrees([0, 150, 320]);\n        },\n\n        splitComplementaryCWScheme: function() {\n            return this.schemeFromDegrees([0, 150, 300]);\n        },\n\n        splitComplementaryCCWScheme: function() {\n            return this.schemeFromDegrees([0, 60, 210]);\n        },\n\n        triadicScheme: function() {\n            return this.schemeFromDegrees([0, 120, 240]);\n        },\n\n        clashScheme: function() {\n            return this.schemeFromDegrees([0, 90, 270]);\n        },\n\n        tetradicScheme: function() {\n            return this.schemeFromDegrees([0, 90, 180, 270]);\n        },\n\n        fourToneCWScheme: function() {\n            return this.schemeFromDegrees([0, 60, 180, 240]);\n        },\n\n        fourToneCCWScheme: function() {\n            return this.schemeFromDegrees([0, 120, 180, 300]);\n        },\n\n        fiveToneAScheme: function() {\n            return this.schemeFromDegrees([0, 115, 155, 205, 245]);\n        },\n\n        fiveToneBScheme: function() {\n            return this.schemeFromDegrees([0, 40, 90, 130, 245]);\n        },\n\n        fiveToneCScheme: function() {\n            return this.schemeFromDegrees([0, 50, 90, 205, 320]);\n        },\n\n        fiveToneDScheme: function() {\n            return this.schemeFromDegrees([0, 40, 155, 270, 310]);\n        },\n\n        fiveToneEScheme: function() {\n            return this.schemeFromDegrees([0, 115, 230, 270, 320]);\n        },\n\n        sixToneCWScheme: function() {\n            return this.schemeFromDegrees([0, 30, 120, 150, 240, 270]);\n        },\n\n        sixToneCCWScheme: function() {\n            return this.schemeFromDegrees([0, 90, 120, 210, 240, 330]);\n        },\n\n        neutralScheme: function() {\n            return this.schemeFromDegrees([0, 15, 30, 45, 60, 75]);\n        },\n\n        analogousScheme: function() {\n            return this.schemeFromDegrees([0, 30, 60, 90, 120, 150]);\n        },\n\n        fromObject: function(o) {\n            if (o.hasOwnProperty('hue') &&\n                o.hasOwnProperty('saturation') &&\n                o.hasOwnProperty('value')) {\n                var hsv = factories.HSV();\n\n                hsv.hue = o.hue;\n                hsv.saturation = o.saturation;\n                hsv.value = o.value;\n                hsv.alpha = o.hasOwnProperty('alpha') ? o.alpha : 1;\n\n                return hsv;\n            }\n            // nothing matches, not an HSV object\n            return null;\n        },\n\n        _normalise: function() {\n            this.hue %= 360;\n            this.saturation = Math.min(Math.max(0, this.saturation), 1);\n            this.value = Math.min(Math.max(0, this.value));\n            this.alpha = Math.min(1, Math.max(0, this.alpha));\n        },\n\n        toRGB: function() {\n            this._normalise();\n\n            var rgb = factories.RGB();\n            var i;\n            var f, p, q, t;\n\n            if (this.saturation === 0) {\n                // achromatic (grey)\n                rgb.red = this.value;\n                rgb.green = this.value;\n                rgb.blue = this.value;\n                rgb.alpha = this.alpha;\n                return rgb;\n            }\n\n            var h = this.hue / 60; // sector 0 to 5\n            i = Math.floor(h);\n            f = h - i; // factorial part of h\n            p = this.value * (1 - this.saturation);\n            q = this.value * (1 - this.saturation * f);\n            t = this.value * (1 - this.saturation * (1 - f));\n\n            switch (i) {\n                case 0:\n                    rgb.red = this.value;\n                    rgb.green = t;\n                    rgb.blue = p;\n                    break;\n                case 1:\n                    rgb.red = q;\n                    rgb.green = this.value;\n                    rgb.blue = p;\n                    break;\n                case 2:\n                    rgb.red = p;\n                    rgb.green = this.value;\n                    rgb.blue = t;\n                    break;\n                case 3:\n                    rgb.red = p;\n                    rgb.green = q;\n                    rgb.blue = this.value;\n                    break;\n                case 4:\n                    rgb.red = t;\n                    rgb.green = p;\n                    rgb.blue = this.value;\n                    break;\n                default: // case 5:\n                    rgb.red = this.value;\n                    rgb.green = p;\n                    rgb.blue = q;\n                    break;\n            }\n\n            rgb.alpha = this.alpha;\n\n            return rgb;\n        },\n        toHSL: function() {\n            this._normalise();\n\n            var hsl = factories.HSL();\n\n            hsl.hue = this.hue;\n            var l = (2 - this.saturation) * this.value,\n                s = this.saturation * this.value;\n            if (l && 2 - l) {\n                s /= (l <= 1) ? l : 2 - l;\n            }\n            l /= 2;\n            hsl.saturation = s;\n            hsl.lightness = l;\n            hsl.alpha = this.alpha;\n\n            return hsl;\n        },\n\n        toHSV: function() {\n            return this.clone();\n        }\n    });\n\n    registerModel('HSL', {\n        hue: 0,\n        saturation: 0,\n        lightness: 0,\n        alpha: 1,\n\n        darkenByAmount: cloneOnApply(function(val) {\n            this.lightness = Math.min(1, Math.max(this.lightness - val, 0));\n        }),\n\n        darkenByRatio: cloneOnApply(function(val) {\n            this.lightness = Math.min(1, Math.max(this.lightness * (1 - val), 0));\n        }),\n\n        lightenByAmount: cloneOnApply(function(val) {\n            this.lightness = Math.min(1, Math.max(this.lightness + val, 0));\n        }),\n\n        lightenByRatio: cloneOnApply(function(val) {\n            this.lightness = Math.min(1, Math.max(this.lightness * (1 + val), 0));\n        }),\n\n        fromObject: function(o) {\n            if (\"string\" == typeof o) {\n                return this._fromCSS(o);\n            }\n            if (o.hasOwnProperty('hue') &&\n                o.hasOwnProperty('saturation') &&\n                o.hasOwnProperty('lightness')) {\n                return this._fromHSL(o);\n            }\n            // nothing matchs, not an RGB object\n        },\n\n        _fromCSS: function(css) {\n            var colorGroups = trim(css).match(hsl_hsla_regex);\n\n            // if there is an \"a\" after \"hsl\", there must be a fourth parameter and the other way round\n            if (!colorGroups || (!!colorGroups[1] + !!colorGroups[5] === 1)) {\n                return null;\n            }\n\n            var hsl = factories.HSL();\n            hsl.hue = (colorGroups[2] % 360 + 360) % 360;\n            hsl.saturation = Math.max(0, Math.min(parseInt(colorGroups[3], 10) / 100, 1));\n            hsl.lightness = Math.max(0, Math.min(parseInt(colorGroups[4], 10) / 100, 1));\n            hsl.alpha = !!colorGroups[5] ? Math.max(0, Math.min(1, parseFloat(colorGroups[6]))) : 1;\n\n            return hsl;\n        },\n\n        _fromHSL: function(HSL) {\n            var newHSL = factories.HSL();\n\n            newHSL.hue = HSL.hue;\n            newHSL.saturation = HSL.saturation;\n            newHSL.lightness = HSL.lightness;\n\n            newHSL.alpha = HSL.hasOwnProperty('alpha') ? HSL.alpha : 1;\n\n            return newHSL;\n        },\n\n        _normalise: function() {\n            this.hue = (this.hue % 360 + 360) % 360;\n            this.saturation = Math.min(Math.max(0, this.saturation), 1);\n            this.lightness = Math.min(Math.max(0, this.lightness));\n            this.alpha = Math.min(1, Math.max(0, this.alpha));\n        },\n\n        toHSL: function() {\n            return this.clone();\n        },\n        toHSV: function() {\n            this._normalise();\n\n            var hsv = factories.HSV();\n\n            // http://ariya.blogspot.com/2008/07/converting-between-hsl-and-hsv.html\n            hsv.hue = this.hue; // H\n            var l = 2 * this.lightness,\n                s = this.saturation * ((l <= 1) ? l : 2 - l);\n            hsv.value = (l + s) / 2; // V\n            hsv.saturation = ((2 * s) / (l + s)) || 0; // S\n            hsv.alpha = this.alpha;\n\n            return hsv;\n        },\n        toRGB: function() {\n            return this.toHSV().toRGB();\n        }\n    });\n\n    // Package specific exports\n\n    /* the Color function is a factory for new color objects.\n     */\n    function Color(o) {\n        return color.fromObject(o);\n    }\n    Color.isValid = function(str) {\n        var key, c = Color(str);\n\n        var length = 0;\n        for (key in c) {\n            if (c.hasOwnProperty(key)) {\n                length++;\n            }\n        }\n\n        return length > 0;\n    };\n    net.brehaut.Color = Color;\n}).call(net.brehaut);\n\n/* Export to CommonJS\n */\nif (typeof module !== 'undefined') {\n    module.exports = net.brehaut.Color;\n}"]},"metadata":{},"sourceType":"script"}