var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/** @jsx jsx */
import { css, jsx } from '@emotion/react';
import React, { forwardRef, isValidElement } from 'react';
import { InView } from 'react-intersection-observer';
import { isFragment } from 'react-is';
import { cloneElement, fadeInUp } from './support';
export var Faded = forwardRef(function (_a, ref1) {
    var _b = _a.cascade, cascade = _b === void 0 ? false : _b, _c = _a.damping, damping = _c === void 0 ? 0.3 : _c, _d = _a.duration, duration = _d === void 0 ? 400 : _d, _e = _a.threshold, threshold = _e === void 0 ? 0.15 : _e, _f = _a.triggerOnce, triggerOnce = _f === void 0 ? false : _f, _g = _a.animation, animation = _g === void 0 ? fadeInUp : _g, _h = _a.whenInView, whenInView = _h === void 0 ? false : _h, _j = _a.delay, delay = _j === void 0 ? 0 : _j, children = _a.children, rest = __rest(_a, ["cascade", "damping", "duration", "threshold", "triggerOnce", "animation", "whenInView", "delay", "children"]);
    function makeAnimated(_a) {
        var inView = _a.inView, nodes = _a.nodes;
        if (!nodes) {
            return null;
        }
        if (isFragment(nodes)) {
            return jsx('div', {
                css: getAnimationCss({ keyframes: animation, delay: delay }),
            }, nodes);
        }
        // cascade the words like https://codepen.io/jh3y/pen/wJMPYQ
        if (typeof nodes === 'string') {
            var words_1 = nodes.split(' ');
            return words_1.map(function (word, index) {
                return (jsx("span", { style: {
                        display: 'inline-block',
                        whiteSpace: 'pre',
                    }, css: getAnimationCss({
                        keyframes: animation,
                        delay: delay +
                            (cascade ? index * duration * damping : 0),
                        duration: duration,
                    }), key: index }, index !== words_1.length - 1 ? word + ' ' : word));
            });
        }
        return React.Children.map(nodes, function (node, index) {
            var _a, _b;
            if (!isValidElement(node)) {
                return node;
            }
            var childElement = node;
            var css = ((_a = childElement.props) === null || _a === void 0 ? void 0 : _a.css // TODO if the css is a function it wont work
            ) ? [(_b = childElement.props) === null || _b === void 0 ? void 0 : _b.css]
                : [];
            if (inView) {
                css.push(getAnimationCss({
                    keyframes: animation,
                    delay: delay +
                        (cascade ? index * duration * damping : 0),
                    duration: duration,
                }));
            }
            else {
                css.push({ opacity: 0 });
            }
            return cloneElement(childElement, {
                css: css,
            });
        });
    }
    if (whenInView) {
        return (jsx(InView, __assign({ threshold: threshold, triggerOnce: triggerOnce }, rest), function (_a) {
            var inView = _a.inView, ref = _a.ref, entry = _a.entry;
            return (jsx("div", { ref: ref }, makeAnimated({ inView: inView, nodes: children })));
        }));
    }
    return (jsx("div", __assign({ ref: ref1 }, rest), makeAnimated({ inView: true, nodes: children })));
});
export function getAnimationCss(_a) {
    var _b = _a.duration, duration = _b === void 0 ? 1000 : _b, _c = _a.delay, delay = _c === void 0 ? 0 : _c, _d = _a.timingFunction, timingFunction = _d === void 0 ? 'ease' : _d, _e = _a.keyframes, keyframes = _e === void 0 ? fadeInUp : _e, _f = _a.iterationCount, iterationCount = _f === void 0 ? 1 : _f;
    return css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n        animation-duration: ", "ms;\n        animation-timing-function: ", ";\n        animation-delay: ", "ms;\n        animation-name: ", ";\n        animation-direction: normal;\n        animation-fill-mode: both;\n        animation-iteration-count: ", ";\n    "], ["\n        animation-duration: ", "ms;\n        animation-timing-function: ", ";\n        animation-delay: ", "ms;\n        animation-name: ", ";\n        animation-direction: normal;\n        animation-fill-mode: both;\n        animation-iteration-count: ", ";\n    "])), duration, timingFunction, delay, keyframes, iterationCount);
}
var templateObject_1;
