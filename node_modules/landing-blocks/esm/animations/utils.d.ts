/// <reference types="react" />
/**
 * Composes a variable number of CSS helper functions.
 * Returns a function that accepts all the original arguments
 * of the functions it composed. If the original function
 * accepted multiple arguments, they must be passed as
 * an array.
 * @example
 * const translateXandRotateY = compose(translateX, rotateY);
 * const cssValue = translateXandRotateY('-5px', '30deg');
 */
export declare const compose: (...funcs: Function[]) => (...styleArgs: (string | number | import("react").ReactText[])[]) => string;
export declare function getNextPercentage(i: any, total: any, limit?: number): string;
export declare const cubicBezier: (a: number, b: number, c: number, d: number) => string;
export declare const translate3d: (a: import("react").ReactText, b: import("react").ReactText, c: import("react").ReactText) => string;
export declare const translateX: (a: import("react").ReactText) => string;
export declare const scale3d: (a: number, b: number, c: number) => string;
export declare const scale: (a: number) => string;
export declare const skewX: (deg: number) => string;
export declare const skewY: (deg: number) => string;
export declare const skewXY: (x: number, y: number) => string;
export declare const rotateY: (a: import("react").ReactText) => string;
export declare const rotate3d: (a: number, b: number, c: number, d: number) => string;
export declare const perspective: (a: import("react").ReactText) => string;
//# sourceMappingURL=utils.d.ts.map